# -*- coding: utf-8 -*-
# Generated by hand
from __future__ import unicode_literals

from django.contrib.auth.management import create_permissions

from django.db import migrations, models


def make_permissions(apps, schema_editor):
    """Borrowed from
    https://code.djangoproject.com/ticket/23422#comment:6
    """

    assert not getattr(apps, 'models_module', None)
    apps.models_module = True

    create_permissions(apps, verbosity=0)

    apps.models_module = None


def assign_permissions(apps, schema_editor):
    """Go with this instead of fixtures
    """

    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    group_defs = {
        'Committee member': (
            'view_user', 'view_boat',
            'view_club', 'view_harbour', 'view_jetty', 'view_berth'),
        'Member': (
            'view_own_user', 'view_own_boat', 'change_own_user',
            'view_club', 'view_harbour', 'view_jetty', 'view_berth')
    }

    permissions = {}
    relevant_objs = models.Q(codename__contains='user') | \
                    models.Q(codename__contains='boat') | \
                    models.Q(codename__contains='club') | \
                    models.Q(codename__contains='harbour') | \
                    models.Q(codename__contains='jetty') | \
                    models.Q(codename__contains='berth')
    for permission in Permission.objects.filter(relevant_objs):
        permissions[permission.codename] = permission

    for group_name, perms in group_defs.items():
        group = Group.objects.get(name=group_name)
        perms = (permissions[perm] for perm in perms)
        group.permissions.add(*perms)


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '__latest__'),
        ('contenttypes', '__latest__'),
        ('barbadosdb', '0011_add_more_groups'),
    ]

    operations = [
        migrations.RunPython(make_permissions),
        migrations.RunPython(assign_permissions),
    ]

